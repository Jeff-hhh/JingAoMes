//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommTcper.SRWebJao {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xml.fa-software.com/mycim/wsdd/", ConfigurationName="SRWebJao.JobManagementWebService")]
    public interface JobManagementWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="loginReturn")]
        string login(string userName, string password, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="loginReturn")]
        System.Threading.Tasks.Task<string> loginAsync(string userName, string password, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotLaminationDataTransmissionReturn")]
        string lotLaminationDataTransmission(string facilityId, string userId, string eqpId, string lotIds, int count, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotLaminationDataTransmissionReturn")]
        System.Threading.Tasks.Task<string> lotLaminationDataTransmissionAsync(string facilityId, string userId, string eqpId, string lotIds, int count, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForLamReturn")]
        string dispatchLotForLam(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForLamReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForLamAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForCyReturn")]
        string dispatchLotForCy(string facilityId, string userId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForCyReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForCyAsync(string facilityId, string userId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotReturn")]
        string dispatchLot(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotReturn")]
        System.Threading.Tasks.Task<string> dispatchLotAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForFRReturn")]
        string dispatchLotForFR(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForFRReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForFRAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForELReturn")]
        string dispatchLotForEL(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForELReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForELAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForLuReturn")]
        string dispatchLotForLu(string facilityId, string userId, string eqipId, string lotIds, string transData, string weldereqpId, string mertialId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForLuReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForLuAsync(string facilityId, string userId, string eqipId, string lotIds, string transData, string weldereqpId, string mertialId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="recordLot4WelderReturn")]
        string recordLot4Welder(string str, string separator);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="recordLot4WelderReturn")]
        System.Threading.Tasks.Task<string> recordLot4WelderAsync(string str, string separator);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="qryJobListByEquipReturn")]
        string qryJobListByEquip(string facilityId, string eqipId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="qryJobListByEquipReturn")]
        System.Threading.Tasks.Task<string> qryJobListByEquipAsync(string facilityId, string eqipId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkMaterialLotReturn")]
        string checkMaterialLot(string condtion);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkMaterialLotReturn")]
        System.Threading.Tasks.Task<string> checkMaterialLotAsync(string condtion);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getEqpInfoReturn")]
        string getEqpInfo(string userId, string equipId, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getEqpInfoReturn")]
        System.Threading.Tasks.Task<string> getEqpInfoAsync(string userId, string equipId, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getMaterialInfo4FRReturn")]
        string getMaterialInfo4FR(string lotId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getMaterialInfo4FRReturn")]
        System.Threading.Tasks.Task<string> getMaterialInfo4FRAsync(string lotId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="repaireForElReturn")]
        string repaireForEl(string facilityId, string userId, string eqipId, string lotIds, string consumeMaterial, string materialLotId, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="repaireForElReturn")]
        System.Threading.Tasks.Task<string> repaireForElAsync(string facilityId, string userId, string eqipId, string lotIds, string consumeMaterial, string materialLotId, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getElTransInfoReturn")]
        string getElTransInfo(string lotId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getElTransInfoReturn")]
        System.Threading.Tasks.Task<string> getElTransInfoAsync(string lotId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="entityStatusChangeReturn")]
        string entityStatusChange(string facilityId, string eqptId, string destStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="entityStatusChangeReturn")]
        System.Threading.Tasks.Task<string> entityStatusChangeAsync(string facilityId, string eqptId, string destStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="uploadElImageReturn")]
        string uploadElImage(string lotId, string eqptId, string imagePath, string hostName, string hostIp, string imageBackUpPath, string type, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="uploadElImageReturn")]
        System.Threading.Tasks.Task<string> uploadElImageAsync(string lotId, string eqptId, string imagePath, string hostName, string hostIp, string imageBackUpPath, string type, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPneedMaterialInterfaceReturn")]
        string EAPneedMaterialInterface(string eqptId, string facilityId, string callItemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPneedMaterialInterfaceReturn")]
        System.Threading.Tasks.Task<string> EAPneedMaterialInterfaceAsync(string eqptId, string facilityId, string callItemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPbindingMaterialInterfaceReturn")]
        string EAPbindingMaterialInterface(string eqptId, string workOrderId, string itemId, string lotNumber, string qty, string supplierId, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPbindingMaterialInterfaceReturn")]
        System.Threading.Tasks.Task<string> EAPbindingMaterialInterfaceAsync(string eqptId, string workOrderId, string itemId, string lotNumber, string qty, string supplierId, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPreturnMaterialInterfaceReturn")]
        string EAPreturnMaterialInterface(string eqptId, string workOrderId, string itemId, string lotNumber, string returnQty, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="EAPreturnMaterialInterfaceReturn")]
        System.Threading.Tasks.Task<string> EAPreturnMaterialInterfaceAsync(string eqptId, string workOrderId, string itemId, string lotNumber, string returnQty, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderListByAgvReturn")]
        string getWorkOrderListByAgv(string facilityId, string eqptId, string itemId, string lotNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderListByAgvReturn")]
        System.Threading.Tasks.Task<string> getWorkOrderListByAgvAsync(string facilityId, string eqptId, string itemId, string lotNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPalletInfo4StationReturn")]
        string GetPalletInfo4Station(string palletStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPalletInfo4StationReturn")]
        System.Threading.Tasks.Task<string> GetPalletInfo4StationAsync(string palletStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RequestBoxInfoReturn")]
        string RequestBoxInfo(string palletId, string TaskNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RequestBoxInfoReturn")]
        System.Threading.Tasks.Task<string> RequestBoxInfoAsync(string palletId, string TaskNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="FailStorePalletReturn")]
        string FailStorePallet(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="FailStorePalletReturn")]
        System.Threading.Tasks.Task<string> FailStorePalletAsync(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UncompletePalletReturn")]
        string UncompletePallet(string palletIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UncompletePalletReturn")]
        System.Threading.Tasks.Task<string> UncompletePalletAsync(string palletIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderInfoForSCHReturn")]
        string getWorkOrderInfoForSCH(string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderInfoForSCHReturn")]
        System.Threading.Tasks.Task<string> getWorkOrderInfoForSCHAsync(string startDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotDemotionAndReleaseInterfaceReturn")]
        string lotDemotionAndReleaseInterface(string facilityId, string lotId, string newGrade, string userId, string comments, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotDemotionAndReleaseInterfaceReturn")]
        System.Threading.Tasks.Task<string> lotDemotionAndReleaseInterfaceAsync(string facilityId, string lotId, string newGrade, string userId, string comments, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getTheComponentVersionReturn")]
        string getTheComponentVersion(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getTheComponentVersionReturn")]
        System.Threading.Tasks.Task<string> getTheComponentVersionAsync(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotCuringRoomNoticeReturn")]
        string lotCuringRoomNotice(string facilityId, string lotId, string area, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="lotCuringRoomNoticeReturn")]
        System.Threading.Tasks.Task<string> lotCuringRoomNoticeAsync(string facilityId, string lotId, string area, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="verifyLotDefectReturn")]
        string verifyLotDefect(string facilityId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="verifyLotDefectReturn")]
        System.Threading.Tasks.Task<string> verifyLotDefectAsync(string facilityId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RequestPalletInfoReturn")]
        string RequestPalletInfo(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="RequestPalletInfoReturn")]
        System.Threading.Tasks.Task<string> RequestPalletInfoAsync(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="bindingMaterialsByErpOrderNumberReturn")]
        string bindingMaterialsByErpOrderNumber(string orderNumber, string facilityId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="bindingMaterialsByErpOrderNumberReturn")]
        System.Threading.Tasks.Task<string> bindingMaterialsByErpOrderNumberAsync(string orderNumber, string facilityId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="rejectMaterialsByErpOrderNumberReturn")]
        string rejectMaterialsByErpOrderNumber(string orderNumber, string facilityId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="rejectMaterialsByErpOrderNumberReturn")]
        System.Threading.Tasks.Task<string> rejectMaterialsByErpOrderNumberAsync(string orderNumber, string facilityId, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="bindingMaterialsByAgvOrderNumberReturn")]
        string bindingMaterialsByAgvOrderNumber(string userName, string taskNo, string facilityId, string flag, string returnReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="bindingMaterialsByAgvOrderNumberReturn")]
        System.Threading.Tasks.Task<string> bindingMaterialsByAgvOrderNumberAsync(string userName, string taskNo, string facilityId, string flag, string returnReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="FindLotExtByLotIDReturn")]
        string FindLotExtByLotID(string lotId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="FindLotExtByLotIDReturn")]
        System.Threading.Tasks.Task<string> FindLotExtByLotIDAsync(string lotId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getModuleInformationReturn")]
        string getModuleInformation(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getModuleInformationReturn")]
        System.Threading.Tasks.Task<string> getModuleInformationAsync(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetMarkInfoDTReturn")]
        string GetMarkInfoDT(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetMarkInfoDTReturn")]
        System.Threading.Tasks.Task<string> GetMarkInfoDTAsync(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLotNewPowerIMPValReturn")]
        string GetLotNewPowerIMPVal(string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLotNewPowerIMPValReturn")]
        System.Threading.Tasks.Task<string> GetLotNewPowerIMPValAsync(string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPowerIDBylotrrnReturn")]
        string GetPowerIDBylotrrn(string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPowerIDBylotrrnReturn")]
        System.Threading.Tasks.Task<string> GetPowerIDBylotrrnAsync(string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPrintLogReturn")]
        string GetPrintLog(string printId, string printType, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPrintLogReturn")]
        System.Threading.Tasks.Task<string> GetPrintLogAsync(string printId, string printType, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GeyPalletInFoByExcelReturn")]
        string GeyPalletInFoByExcel(string palletListString, long rowmum, string num);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GeyPalletInFoByExcelReturn")]
        System.Threading.Tasks.Task<string> GeyPalletInFoByExcelAsync(string palletListString, long rowmum, string num);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetOrderExtByOrderIDReturn")]
        string GetOrderExtByOrderID(string orderId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetOrderExtByOrderIDReturn")]
        System.Threading.Tasks.Task<string> GetOrderExtByOrderIDAsync(string orderId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getNameplateInformationReturn")]
        string getNameplateInformation(string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getNameplateInformationReturn")]
        System.Threading.Tasks.Task<string> getNameplateInformationAsync(string orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BuildPrintTransLogReturn")]
        string BuildPrintTransLog(string printId, string printType, string templateName, string userId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="BuildPrintTransLogReturn")]
        System.Threading.Tasks.Task<string> BuildPrintTransLogAsync(string printId, string printType, string templateName, string userId, string facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UpdateLotExtReturn")]
        string UpdateLotExt(string specialCode, string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="UpdateLotExtReturn")]
        System.Threading.Tasks.Task<string> UpdateLotExtAsync(string specialCode, string lotRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getPalletLocationReturn")]
        string getPalletLocation(string lotId, string lineId, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getPalletLocationReturn")]
        System.Threading.Tasks.Task<string> getPalletLocationAsync(string lotId, string lineId, string facilityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getLotInfoReturn")]
        string getLotInfo(string lotId, long equipRrn, long userRrn, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getLotInfoReturn")]
        System.Threading.Tasks.Task<string> getLotInfoAsync(string lotId, long equipRrn, long userRrn, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="transferMatForWmsReturn")]
        string transferMatForWms(string wmsDatas, string facilityId, string transUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="transferMatForWmsReturn")]
        System.Threading.Tasks.Task<string> transferMatForWmsAsync(string wmsDatas, string facilityId, string transUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getNameplateInfoReturn")]
        string getNameplateInfo(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getNameplateInfoReturn")]
        System.Threading.Tasks.Task<string> getNameplateInfoAsync(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getBarCodeReturn")]
        string getBarCode(string facilityId, string eqpId, string workOrderId, string userId, int requestQty);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getBarCodeReturn")]
        System.Threading.Tasks.Task<string> getBarCodeAsync(string facilityId, string eqpId, string workOrderId, string userId, int requestQty);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderIdByEqpIdReturn")]
        string getWorkOrderIdByEqpId(string facilityId, string userId, string eqpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getWorkOrderIdByEqpIdReturn")]
        System.Threading.Tasks.Task<string> getWorkOrderIdByEqpIdAsync(string facilityId, string userId, string eqpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchCancelPostingReturn")]
        string dispatchCancelPosting(string facilityId, string userId, string workOrderId, string eqpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchCancelPostingReturn")]
        System.Threading.Tasks.Task<string> dispatchCancelPostingAsync(string facilityId, string userId, string workOrderId, string eqpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkPrintFlagReturn")]
        string checkPrintFlag(string facilityId, string userId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkPrintFlagReturn")]
        System.Threading.Tasks.Task<string> checkPrintFlagAsync(string facilityId, string userId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveIVFrockInfoReturn")]
        string saveIVFrockInfo(string IVFrockInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveIVFrockInfoReturn")]
        System.Threading.Tasks.Task<string> saveIVFrockInfoAsync(string IVFrockInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveWMSReturnMaterialsInfoReturn")]
        string saveWMSReturnMaterialsInfo(string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveWMSReturnMaterialsInfoReturn")]
        System.Threading.Tasks.Task<string> saveWMSReturnMaterialsInfoAsync(string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveAiLineInfoReturn")]
        string saveAiLineInfo(string lotId, string reasonDetail, string reasonType, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveAiLineInfoReturn")]
        System.Threading.Tasks.Task<string> saveAiLineInfoAsync(string lotId, string reasonDetail, string reasonType, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="agvCheckMaterialOneReturn")]
        string agvCheckMaterialOne(string lineId, string shiftId, string itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="agvCheckMaterialOneReturn")]
        System.Threading.Tasks.Task<string> agvCheckMaterialOneAsync(string lineId, string shiftId, string itemType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="agvCheckMaterialTwoReturn")]
        string agvCheckMaterialTwo(string lineId, string shiftId, string itemInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="agvCheckMaterialTwoReturn")]
        System.Threading.Tasks.Task<string> agvCheckMaterialTwoAsync(string lineId, string shiftId, string itemInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="generalUploadInterfaceReturn")]
        string generalUploadInterface(string facilityId, string lineId, string eqptId, string transType, string lotId, string decisionResult, string transData, string attr1, string attr2, string attr3);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="generalUploadInterfaceReturn")]
        System.Threading.Tasks.Task<string> generalUploadInterfaceAsync(string facilityId, string lineId, string eqptId, string transType, string lotId, string decisionResult, string transData, string attr1, string attr2, string attr3);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="withStandVoltageReturn")]
        string withStandVoltage(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="withStandVoltageReturn")]
        System.Threading.Tasks.Task<string> withStandVoltageAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkLotIdReturn")]
        string checkLotId(string glassLotId, string farmeLotId, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkLotIdReturn")]
        System.Threading.Tasks.Task<string> checkLotIdAsync(string glassLotId, string farmeLotId, long facilityRrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="recordeElInfoReturn")]
        string recordeElInfo(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="recordeElInfoReturn")]
        System.Threading.Tasks.Task<string> recordeElInfoAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="geteapglassidReturn")]
        string geteapglassid(string glassjson);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="geteapglassidReturn")]
        System.Threading.Tasks.Task<string> geteapglassidAsync(string glassjson);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPalletWithPowerInfoReturn")]
        string GetPalletWithPowerInfo(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetPalletWithPowerInfoReturn")]
        System.Threading.Tasks.Task<string> GetPalletWithPowerInfoAsync(string palletId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLotBasicInfoReturn")]
        string GetLotBasicInfo(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetLotBasicInfoReturn")]
        System.Threading.Tasks.Task<string> GetLotBasicInfoAsync(string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetELImagebyPalletReturn")]
        string GetELImagebyPallet(string PalletListString, long rowmum, bool chkLAMB, bool chkLAMA, bool chkIV, bool chkLAMAVI, bool chkLAMBVI, bool chkJXH, string DataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="GetELImagebyPalletReturn")]
        System.Threading.Tasks.Task<string> GetELImagebyPalletAsync(string PalletListString, long rowmum, bool chkLAMB, bool chkLAMA, bool chkIV, bool chkLAMAVI, bool chkLAMBVI, bool chkJXH, string DataType);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForDCReturn")]
        string dispatchLotForDC(string facilityId, string userId, string eqipId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchLotForDCReturn")]
        System.Threading.Tasks.Task<string> dispatchLotForDCAsync(string facilityId, string userId, string eqipId, string lotId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveZKAiLineInfoReturn")]
        string saveZKAiLineInfo(string facilityId, string eqptId, string lotId, string user, string reasonDetail, string reasonType, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="saveZKAiLineInfoReturn")]
        System.Threading.Tasks.Task<string> saveZKAiLineInfoAsync(string facilityId, string eqptId, string lotId, string user, string reasonDetail, string reasonType, string dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="heartbeatErrorReturn")]
        string heartbeatError(string facilityId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="heartbeatErrorReturn")]
        System.Threading.Tasks.Task<string> heartbeatErrorAsync(string facilityId, string eqptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchforSouthVIReturn")]
        string dispatchforSouthVI(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchforSouthVIReturn")]
        System.Threading.Tasks.Task<string> dispatchforSouthVIAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchforNorthVIReturn")]
        string dispatchforNorthVI(string facilityId, string userId, string eqipId, string lotIds, string transData);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="dispatchforNorthVIReturn")]
        System.Threading.Tasks.Task<string> dispatchforNorthVIAsync(string facilityId, string userId, string eqipId, string lotIds, string transData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface JobManagementWebServiceChannel : CommTcper.SRWebJao.JobManagementWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JobManagementWebServiceClient : System.ServiceModel.ClientBase<CommTcper.SRWebJao.JobManagementWebService>, CommTcper.SRWebJao.JobManagementWebService {
        
        public JobManagementWebServiceClient() {
        }
        
        public JobManagementWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JobManagementWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagementWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobManagementWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string login(string userName, string password, string facilityId) {
            return base.Channel.login(userName, password, facilityId);
        }
        
        public System.Threading.Tasks.Task<string> loginAsync(string userName, string password, string facilityId) {
            return base.Channel.loginAsync(userName, password, facilityId);
        }
        
        public string lotLaminationDataTransmission(string facilityId, string userId, string eqpId, string lotIds, int count, string transData) {
            return base.Channel.lotLaminationDataTransmission(facilityId, userId, eqpId, lotIds, count, transData);
        }
        
        public System.Threading.Tasks.Task<string> lotLaminationDataTransmissionAsync(string facilityId, string userId, string eqpId, string lotIds, int count, string transData) {
            return base.Channel.lotLaminationDataTransmissionAsync(facilityId, userId, eqpId, lotIds, count, transData);
        }
        
        public string dispatchLotForLam(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForLam(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForLamAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForLamAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string dispatchLotForCy(string facilityId, string userId, string lotId) {
            return base.Channel.dispatchLotForCy(facilityId, userId, lotId);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForCyAsync(string facilityId, string userId, string lotId) {
            return base.Channel.dispatchLotForCyAsync(facilityId, userId, lotId);
        }
        
        public string dispatchLot(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLot(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string dispatchLotForFR(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForFR(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForFRAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForFRAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string dispatchLotForEL(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForEL(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForELAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchLotForELAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string dispatchLotForLu(string facilityId, string userId, string eqipId, string lotIds, string transData, string weldereqpId, string mertialId) {
            return base.Channel.dispatchLotForLu(facilityId, userId, eqipId, lotIds, transData, weldereqpId, mertialId);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForLuAsync(string facilityId, string userId, string eqipId, string lotIds, string transData, string weldereqpId, string mertialId) {
            return base.Channel.dispatchLotForLuAsync(facilityId, userId, eqipId, lotIds, transData, weldereqpId, mertialId);
        }
        
        public string recordLot4Welder(string str, string separator) {
            return base.Channel.recordLot4Welder(str, separator);
        }
        
        public System.Threading.Tasks.Task<string> recordLot4WelderAsync(string str, string separator) {
            return base.Channel.recordLot4WelderAsync(str, separator);
        }
        
        public string qryJobListByEquip(string facilityId, string eqipId) {
            return base.Channel.qryJobListByEquip(facilityId, eqipId);
        }
        
        public System.Threading.Tasks.Task<string> qryJobListByEquipAsync(string facilityId, string eqipId) {
            return base.Channel.qryJobListByEquipAsync(facilityId, eqipId);
        }
        
        public string checkMaterialLot(string condtion) {
            return base.Channel.checkMaterialLot(condtion);
        }
        
        public System.Threading.Tasks.Task<string> checkMaterialLotAsync(string condtion) {
            return base.Channel.checkMaterialLotAsync(condtion);
        }
        
        public string getEqpInfo(string userId, string equipId, long facilityRrn) {
            return base.Channel.getEqpInfo(userId, equipId, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> getEqpInfoAsync(string userId, string equipId, long facilityRrn) {
            return base.Channel.getEqpInfoAsync(userId, equipId, facilityRrn);
        }
        
        public string getMaterialInfo4FR(string lotId, string eqptId) {
            return base.Channel.getMaterialInfo4FR(lotId, eqptId);
        }
        
        public System.Threading.Tasks.Task<string> getMaterialInfo4FRAsync(string lotId, string eqptId) {
            return base.Channel.getMaterialInfo4FRAsync(lotId, eqptId);
        }
        
        public string repaireForEl(string facilityId, string userId, string eqipId, string lotIds, string consumeMaterial, string materialLotId, string transData) {
            return base.Channel.repaireForEl(facilityId, userId, eqipId, lotIds, consumeMaterial, materialLotId, transData);
        }
        
        public System.Threading.Tasks.Task<string> repaireForElAsync(string facilityId, string userId, string eqipId, string lotIds, string consumeMaterial, string materialLotId, string transData) {
            return base.Channel.repaireForElAsync(facilityId, userId, eqipId, lotIds, consumeMaterial, materialLotId, transData);
        }
        
        public string getElTransInfo(string lotId, string eqptId) {
            return base.Channel.getElTransInfo(lotId, eqptId);
        }
        
        public System.Threading.Tasks.Task<string> getElTransInfoAsync(string lotId, string eqptId) {
            return base.Channel.getElTransInfoAsync(lotId, eqptId);
        }
        
        public string entityStatusChange(string facilityId, string eqptId, string destStatus) {
            return base.Channel.entityStatusChange(facilityId, eqptId, destStatus);
        }
        
        public System.Threading.Tasks.Task<string> entityStatusChangeAsync(string facilityId, string eqptId, string destStatus) {
            return base.Channel.entityStatusChangeAsync(facilityId, eqptId, destStatus);
        }
        
        public string uploadElImage(string lotId, string eqptId, string imagePath, string hostName, string hostIp, string imageBackUpPath, string type, string userId) {
            return base.Channel.uploadElImage(lotId, eqptId, imagePath, hostName, hostIp, imageBackUpPath, type, userId);
        }
        
        public System.Threading.Tasks.Task<string> uploadElImageAsync(string lotId, string eqptId, string imagePath, string hostName, string hostIp, string imageBackUpPath, string type, string userId) {
            return base.Channel.uploadElImageAsync(lotId, eqptId, imagePath, hostName, hostIp, imageBackUpPath, type, userId);
        }
        
        public string EAPneedMaterialInterface(string eqptId, string facilityId, string callItemType) {
            return base.Channel.EAPneedMaterialInterface(eqptId, facilityId, callItemType);
        }
        
        public System.Threading.Tasks.Task<string> EAPneedMaterialInterfaceAsync(string eqptId, string facilityId, string callItemType) {
            return base.Channel.EAPneedMaterialInterfaceAsync(eqptId, facilityId, callItemType);
        }
        
        public string EAPbindingMaterialInterface(string eqptId, string workOrderId, string itemId, string lotNumber, string qty, string supplierId, string facilityId) {
            return base.Channel.EAPbindingMaterialInterface(eqptId, workOrderId, itemId, lotNumber, qty, supplierId, facilityId);
        }
        
        public System.Threading.Tasks.Task<string> EAPbindingMaterialInterfaceAsync(string eqptId, string workOrderId, string itemId, string lotNumber, string qty, string supplierId, string facilityId) {
            return base.Channel.EAPbindingMaterialInterfaceAsync(eqptId, workOrderId, itemId, lotNumber, qty, supplierId, facilityId);
        }
        
        public string EAPreturnMaterialInterface(string eqptId, string workOrderId, string itemId, string lotNumber, string returnQty, string facilityId) {
            return base.Channel.EAPreturnMaterialInterface(eqptId, workOrderId, itemId, lotNumber, returnQty, facilityId);
        }
        
        public System.Threading.Tasks.Task<string> EAPreturnMaterialInterfaceAsync(string eqptId, string workOrderId, string itemId, string lotNumber, string returnQty, string facilityId) {
            return base.Channel.EAPreturnMaterialInterfaceAsync(eqptId, workOrderId, itemId, lotNumber, returnQty, facilityId);
        }
        
        public string getWorkOrderListByAgv(string facilityId, string eqptId, string itemId, string lotNumber) {
            return base.Channel.getWorkOrderListByAgv(facilityId, eqptId, itemId, lotNumber);
        }
        
        public System.Threading.Tasks.Task<string> getWorkOrderListByAgvAsync(string facilityId, string eqptId, string itemId, string lotNumber) {
            return base.Channel.getWorkOrderListByAgvAsync(facilityId, eqptId, itemId, lotNumber);
        }
        
        public string GetPalletInfo4Station(string palletStr) {
            return base.Channel.GetPalletInfo4Station(palletStr);
        }
        
        public System.Threading.Tasks.Task<string> GetPalletInfo4StationAsync(string palletStr) {
            return base.Channel.GetPalletInfo4StationAsync(palletStr);
        }
        
        public string RequestBoxInfo(string palletId, string TaskNo) {
            return base.Channel.RequestBoxInfo(palletId, TaskNo);
        }
        
        public System.Threading.Tasks.Task<string> RequestBoxInfoAsync(string palletId, string TaskNo) {
            return base.Channel.RequestBoxInfoAsync(palletId, TaskNo);
        }
        
        public string FailStorePallet(string palletId) {
            return base.Channel.FailStorePallet(palletId);
        }
        
        public System.Threading.Tasks.Task<string> FailStorePalletAsync(string palletId) {
            return base.Channel.FailStorePalletAsync(palletId);
        }
        
        public string UncompletePallet(string palletIds) {
            return base.Channel.UncompletePallet(palletIds);
        }
        
        public System.Threading.Tasks.Task<string> UncompletePalletAsync(string palletIds) {
            return base.Channel.UncompletePalletAsync(palletIds);
        }
        
        public string getWorkOrderInfoForSCH(string startDate, string endDate) {
            return base.Channel.getWorkOrderInfoForSCH(startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<string> getWorkOrderInfoForSCHAsync(string startDate, string endDate) {
            return base.Channel.getWorkOrderInfoForSCHAsync(startDate, endDate);
        }
        
        public string lotDemotionAndReleaseInterface(string facilityId, string lotId, string newGrade, string userId, string comments, string type) {
            return base.Channel.lotDemotionAndReleaseInterface(facilityId, lotId, newGrade, userId, comments, type);
        }
        
        public System.Threading.Tasks.Task<string> lotDemotionAndReleaseInterfaceAsync(string facilityId, string lotId, string newGrade, string userId, string comments, string type) {
            return base.Channel.lotDemotionAndReleaseInterfaceAsync(facilityId, lotId, newGrade, userId, comments, type);
        }
        
        public string getTheComponentVersion(string lotId) {
            return base.Channel.getTheComponentVersion(lotId);
        }
        
        public System.Threading.Tasks.Task<string> getTheComponentVersionAsync(string lotId) {
            return base.Channel.getTheComponentVersionAsync(lotId);
        }
        
        public string lotCuringRoomNotice(string facilityId, string lotId, string area, string type) {
            return base.Channel.lotCuringRoomNotice(facilityId, lotId, area, type);
        }
        
        public System.Threading.Tasks.Task<string> lotCuringRoomNoticeAsync(string facilityId, string lotId, string area, string type) {
            return base.Channel.lotCuringRoomNoticeAsync(facilityId, lotId, area, type);
        }
        
        public string verifyLotDefect(string facilityId, string lotId) {
            return base.Channel.verifyLotDefect(facilityId, lotId);
        }
        
        public System.Threading.Tasks.Task<string> verifyLotDefectAsync(string facilityId, string lotId) {
            return base.Channel.verifyLotDefectAsync(facilityId, lotId);
        }
        
        public string RequestPalletInfo(string palletId) {
            return base.Channel.RequestPalletInfo(palletId);
        }
        
        public System.Threading.Tasks.Task<string> RequestPalletInfoAsync(string palletId) {
            return base.Channel.RequestPalletInfoAsync(palletId);
        }
        
        public string bindingMaterialsByErpOrderNumber(string orderNumber, string facilityId, string userId) {
            return base.Channel.bindingMaterialsByErpOrderNumber(orderNumber, facilityId, userId);
        }
        
        public System.Threading.Tasks.Task<string> bindingMaterialsByErpOrderNumberAsync(string orderNumber, string facilityId, string userId) {
            return base.Channel.bindingMaterialsByErpOrderNumberAsync(orderNumber, facilityId, userId);
        }
        
        public string rejectMaterialsByErpOrderNumber(string orderNumber, string facilityId, string userId) {
            return base.Channel.rejectMaterialsByErpOrderNumber(orderNumber, facilityId, userId);
        }
        
        public System.Threading.Tasks.Task<string> rejectMaterialsByErpOrderNumberAsync(string orderNumber, string facilityId, string userId) {
            return base.Channel.rejectMaterialsByErpOrderNumberAsync(orderNumber, facilityId, userId);
        }
        
        public string bindingMaterialsByAgvOrderNumber(string userName, string taskNo, string facilityId, string flag, string returnReason) {
            return base.Channel.bindingMaterialsByAgvOrderNumber(userName, taskNo, facilityId, flag, returnReason);
        }
        
        public System.Threading.Tasks.Task<string> bindingMaterialsByAgvOrderNumberAsync(string userName, string taskNo, string facilityId, string flag, string returnReason) {
            return base.Channel.bindingMaterialsByAgvOrderNumberAsync(userName, taskNo, facilityId, flag, returnReason);
        }
        
        public string FindLotExtByLotID(string lotId, string facilityRrn) {
            return base.Channel.FindLotExtByLotID(lotId, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> FindLotExtByLotIDAsync(string lotId, string facilityRrn) {
            return base.Channel.FindLotExtByLotIDAsync(lotId, facilityRrn);
        }
        
        public string getModuleInformation(string lotId) {
            return base.Channel.getModuleInformation(lotId);
        }
        
        public System.Threading.Tasks.Task<string> getModuleInformationAsync(string lotId) {
            return base.Channel.getModuleInformationAsync(lotId);
        }
        
        public string GetMarkInfoDT(string palletId) {
            return base.Channel.GetMarkInfoDT(palletId);
        }
        
        public System.Threading.Tasks.Task<string> GetMarkInfoDTAsync(string palletId) {
            return base.Channel.GetMarkInfoDTAsync(palletId);
        }
        
        public string GetLotNewPowerIMPVal(string lotRrn) {
            return base.Channel.GetLotNewPowerIMPVal(lotRrn);
        }
        
        public System.Threading.Tasks.Task<string> GetLotNewPowerIMPValAsync(string lotRrn) {
            return base.Channel.GetLotNewPowerIMPValAsync(lotRrn);
        }
        
        public string GetPowerIDBylotrrn(string lotRrn) {
            return base.Channel.GetPowerIDBylotrrn(lotRrn);
        }
        
        public System.Threading.Tasks.Task<string> GetPowerIDBylotrrnAsync(string lotRrn) {
            return base.Channel.GetPowerIDBylotrrnAsync(lotRrn);
        }
        
        public string GetPrintLog(string printId, string printType, string facilityRrn) {
            return base.Channel.GetPrintLog(printId, printType, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> GetPrintLogAsync(string printId, string printType, string facilityRrn) {
            return base.Channel.GetPrintLogAsync(printId, printType, facilityRrn);
        }
        
        public string GeyPalletInFoByExcel(string palletListString, long rowmum, string num) {
            return base.Channel.GeyPalletInFoByExcel(palletListString, rowmum, num);
        }
        
        public System.Threading.Tasks.Task<string> GeyPalletInFoByExcelAsync(string palletListString, long rowmum, string num) {
            return base.Channel.GeyPalletInFoByExcelAsync(palletListString, rowmum, num);
        }
        
        public string GetOrderExtByOrderID(string orderId, string facilityRrn) {
            return base.Channel.GetOrderExtByOrderID(orderId, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> GetOrderExtByOrderIDAsync(string orderId, string facilityRrn) {
            return base.Channel.GetOrderExtByOrderIDAsync(orderId, facilityRrn);
        }
        
        public string getNameplateInformation(string orderId) {
            return base.Channel.getNameplateInformation(orderId);
        }
        
        public System.Threading.Tasks.Task<string> getNameplateInformationAsync(string orderId) {
            return base.Channel.getNameplateInformationAsync(orderId);
        }
        
        public string BuildPrintTransLog(string printId, string printType, string templateName, string userId, string facilityRrn) {
            return base.Channel.BuildPrintTransLog(printId, printType, templateName, userId, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> BuildPrintTransLogAsync(string printId, string printType, string templateName, string userId, string facilityRrn) {
            return base.Channel.BuildPrintTransLogAsync(printId, printType, templateName, userId, facilityRrn);
        }
        
        public string UpdateLotExt(string specialCode, string lotRrn) {
            return base.Channel.UpdateLotExt(specialCode, lotRrn);
        }
        
        public System.Threading.Tasks.Task<string> UpdateLotExtAsync(string specialCode, string lotRrn) {
            return base.Channel.UpdateLotExtAsync(specialCode, lotRrn);
        }
        
        public string getPalletLocation(string lotId, string lineId, string facilityId) {
            return base.Channel.getPalletLocation(lotId, lineId, facilityId);
        }
        
        public System.Threading.Tasks.Task<string> getPalletLocationAsync(string lotId, string lineId, string facilityId) {
            return base.Channel.getPalletLocationAsync(lotId, lineId, facilityId);
        }
        
        public string getLotInfo(string lotId, long equipRrn, long userRrn, long facilityRrn) {
            return base.Channel.getLotInfo(lotId, equipRrn, userRrn, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> getLotInfoAsync(string lotId, long equipRrn, long userRrn, long facilityRrn) {
            return base.Channel.getLotInfoAsync(lotId, equipRrn, userRrn, facilityRrn);
        }
        
        public string transferMatForWms(string wmsDatas, string facilityId, string transUser) {
            return base.Channel.transferMatForWms(wmsDatas, facilityId, transUser);
        }
        
        public System.Threading.Tasks.Task<string> transferMatForWmsAsync(string wmsDatas, string facilityId, string transUser) {
            return base.Channel.transferMatForWmsAsync(wmsDatas, facilityId, transUser);
        }
        
        public string getNameplateInfo(string lotId) {
            return base.Channel.getNameplateInfo(lotId);
        }
        
        public System.Threading.Tasks.Task<string> getNameplateInfoAsync(string lotId) {
            return base.Channel.getNameplateInfoAsync(lotId);
        }
        
        public string getBarCode(string facilityId, string eqpId, string workOrderId, string userId, int requestQty) {
            return base.Channel.getBarCode(facilityId, eqpId, workOrderId, userId, requestQty);
        }
        
        public System.Threading.Tasks.Task<string> getBarCodeAsync(string facilityId, string eqpId, string workOrderId, string userId, int requestQty) {
            return base.Channel.getBarCodeAsync(facilityId, eqpId, workOrderId, userId, requestQty);
        }
        
        public string getWorkOrderIdByEqpId(string facilityId, string userId, string eqpId) {
            return base.Channel.getWorkOrderIdByEqpId(facilityId, userId, eqpId);
        }
        
        public System.Threading.Tasks.Task<string> getWorkOrderIdByEqpIdAsync(string facilityId, string userId, string eqpId) {
            return base.Channel.getWorkOrderIdByEqpIdAsync(facilityId, userId, eqpId);
        }
        
        public string dispatchCancelPosting(string facilityId, string userId, string workOrderId, string eqpId) {
            return base.Channel.dispatchCancelPosting(facilityId, userId, workOrderId, eqpId);
        }
        
        public System.Threading.Tasks.Task<string> dispatchCancelPostingAsync(string facilityId, string userId, string workOrderId, string eqpId) {
            return base.Channel.dispatchCancelPostingAsync(facilityId, userId, workOrderId, eqpId);
        }
        
        public string checkPrintFlag(string facilityId, string userId, string lotId) {
            return base.Channel.checkPrintFlag(facilityId, userId, lotId);
        }
        
        public System.Threading.Tasks.Task<string> checkPrintFlagAsync(string facilityId, string userId, string lotId) {
            return base.Channel.checkPrintFlagAsync(facilityId, userId, lotId);
        }
        
        public string saveIVFrockInfo(string IVFrockInfo) {
            return base.Channel.saveIVFrockInfo(IVFrockInfo);
        }
        
        public System.Threading.Tasks.Task<string> saveIVFrockInfoAsync(string IVFrockInfo) {
            return base.Channel.saveIVFrockInfoAsync(IVFrockInfo);
        }
        
        public string saveWMSReturnMaterialsInfo(string transData) {
            return base.Channel.saveWMSReturnMaterialsInfo(transData);
        }
        
        public System.Threading.Tasks.Task<string> saveWMSReturnMaterialsInfoAsync(string transData) {
            return base.Channel.saveWMSReturnMaterialsInfoAsync(transData);
        }
        
        public string saveAiLineInfo(string lotId, string reasonDetail, string reasonType, string dateTime) {
            return base.Channel.saveAiLineInfo(lotId, reasonDetail, reasonType, dateTime);
        }
        
        public System.Threading.Tasks.Task<string> saveAiLineInfoAsync(string lotId, string reasonDetail, string reasonType, string dateTime) {
            return base.Channel.saveAiLineInfoAsync(lotId, reasonDetail, reasonType, dateTime);
        }
        
        public string agvCheckMaterialOne(string lineId, string shiftId, string itemType) {
            return base.Channel.agvCheckMaterialOne(lineId, shiftId, itemType);
        }
        
        public System.Threading.Tasks.Task<string> agvCheckMaterialOneAsync(string lineId, string shiftId, string itemType) {
            return base.Channel.agvCheckMaterialOneAsync(lineId, shiftId, itemType);
        }
        
        public string agvCheckMaterialTwo(string lineId, string shiftId, string itemInfo) {
            return base.Channel.agvCheckMaterialTwo(lineId, shiftId, itemInfo);
        }
        
        public System.Threading.Tasks.Task<string> agvCheckMaterialTwoAsync(string lineId, string shiftId, string itemInfo) {
            return base.Channel.agvCheckMaterialTwoAsync(lineId, shiftId, itemInfo);
        }
        
        public string generalUploadInterface(string facilityId, string lineId, string eqptId, string transType, string lotId, string decisionResult, string transData, string attr1, string attr2, string attr3) {
            return base.Channel.generalUploadInterface(facilityId, lineId, eqptId, transType, lotId, decisionResult, transData, attr1, attr2, attr3);
        }
        
        public System.Threading.Tasks.Task<string> generalUploadInterfaceAsync(string facilityId, string lineId, string eqptId, string transType, string lotId, string decisionResult, string transData, string attr1, string attr2, string attr3) {
            return base.Channel.generalUploadInterfaceAsync(facilityId, lineId, eqptId, transType, lotId, decisionResult, transData, attr1, attr2, attr3);
        }
        
        public string withStandVoltage(string data) {
            return base.Channel.withStandVoltage(data);
        }
        
        public System.Threading.Tasks.Task<string> withStandVoltageAsync(string data) {
            return base.Channel.withStandVoltageAsync(data);
        }
        
        public string checkLotId(string glassLotId, string farmeLotId, long facilityRrn) {
            return base.Channel.checkLotId(glassLotId, farmeLotId, facilityRrn);
        }
        
        public System.Threading.Tasks.Task<string> checkLotIdAsync(string glassLotId, string farmeLotId, long facilityRrn) {
            return base.Channel.checkLotIdAsync(glassLotId, farmeLotId, facilityRrn);
        }
        
        public string recordeElInfo(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.recordeElInfo(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> recordeElInfoAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.recordeElInfoAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string geteapglassid(string glassjson) {
            return base.Channel.geteapglassid(glassjson);
        }
        
        public System.Threading.Tasks.Task<string> geteapglassidAsync(string glassjson) {
            return base.Channel.geteapglassidAsync(glassjson);
        }
        
        public string GetPalletWithPowerInfo(string palletId) {
            return base.Channel.GetPalletWithPowerInfo(palletId);
        }
        
        public System.Threading.Tasks.Task<string> GetPalletWithPowerInfoAsync(string palletId) {
            return base.Channel.GetPalletWithPowerInfoAsync(palletId);
        }
        
        public string GetLotBasicInfo(string lotId) {
            return base.Channel.GetLotBasicInfo(lotId);
        }
        
        public System.Threading.Tasks.Task<string> GetLotBasicInfoAsync(string lotId) {
            return base.Channel.GetLotBasicInfoAsync(lotId);
        }
        
        public string GetELImagebyPallet(string PalletListString, long rowmum, bool chkLAMB, bool chkLAMA, bool chkIV, bool chkLAMAVI, bool chkLAMBVI, bool chkJXH, string DataType) {
            return base.Channel.GetELImagebyPallet(PalletListString, rowmum, chkLAMB, chkLAMA, chkIV, chkLAMAVI, chkLAMBVI, chkJXH, DataType);
        }
        
        public System.Threading.Tasks.Task<string> GetELImagebyPalletAsync(string PalletListString, long rowmum, bool chkLAMB, bool chkLAMA, bool chkIV, bool chkLAMAVI, bool chkLAMBVI, bool chkJXH, string DataType) {
            return base.Channel.GetELImagebyPalletAsync(PalletListString, rowmum, chkLAMB, chkLAMA, chkIV, chkLAMAVI, chkLAMBVI, chkJXH, DataType);
        }
        
        public string dispatchLotForDC(string facilityId, string userId, string eqipId, string lotId) {
            return base.Channel.dispatchLotForDC(facilityId, userId, eqipId, lotId);
        }
        
        public System.Threading.Tasks.Task<string> dispatchLotForDCAsync(string facilityId, string userId, string eqipId, string lotId) {
            return base.Channel.dispatchLotForDCAsync(facilityId, userId, eqipId, lotId);
        }
        
        public string saveZKAiLineInfo(string facilityId, string eqptId, string lotId, string user, string reasonDetail, string reasonType, string dateTime) {
            return base.Channel.saveZKAiLineInfo(facilityId, eqptId, lotId, user, reasonDetail, reasonType, dateTime);
        }
        
        public System.Threading.Tasks.Task<string> saveZKAiLineInfoAsync(string facilityId, string eqptId, string lotId, string user, string reasonDetail, string reasonType, string dateTime) {
            return base.Channel.saveZKAiLineInfoAsync(facilityId, eqptId, lotId, user, reasonDetail, reasonType, dateTime);
        }
        
        public string heartbeatError(string facilityId, string eqptId) {
            return base.Channel.heartbeatError(facilityId, eqptId);
        }
        
        public System.Threading.Tasks.Task<string> heartbeatErrorAsync(string facilityId, string eqptId) {
            return base.Channel.heartbeatErrorAsync(facilityId, eqptId);
        }
        
        public string dispatchforSouthVI(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchforSouthVI(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchforSouthVIAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchforSouthVIAsync(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public string dispatchforNorthVI(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchforNorthVI(facilityId, userId, eqipId, lotIds, transData);
        }
        
        public System.Threading.Tasks.Task<string> dispatchforNorthVIAsync(string facilityId, string userId, string eqipId, string lotIds, string transData) {
            return base.Channel.dispatchforNorthVIAsync(facilityId, userId, eqipId, lotIds, transData);
        }
    }
}
